#include "stdafx.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////////
// cMesh() - constructor
//////////////////////////////////////////////////////////////////////////////////////////////////////////
cMesh::cMesh()
{
	m_instance_count = 1;
	m_isInstanced = false;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
// ~cMesh() - destructor
//////////////////////////////////////////////////////////////////////////////////////////////////////////
cMesh::~cMesh()
{
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
// init() - 
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void cMesh::Init(const char* meshName, int mesh_id, int shader_id, vec3 pos, vec3 rot_axis, float rot_angle, vec3 scale)
{
	m_obj.init(meshName, mesh_id, shader_id, m_instance_count);
	m_transform.init(pos, rot_axis, rot_angle, scale);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
// update() - creates the model and normal matrices used to transform this object
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void cMesh::Update(float spin_speed)
{
	m_transform.m_rotAngle += spin_speed;
	m_obj.modelMatrix = glm::rotate(mat4(1.0f), radians(0.0f), vec3(1, 0, 0));
	
	m_obj.modelMatrix = glm::translate(m_obj.modelMatrix, m_transform.m_pos);
	m_obj.modelMatrix = glm::scale(m_obj.modelMatrix, vec3(m_transform.m_scale));

	m_obj.modelMatrix = glm::rotate(m_obj.modelMatrix, radians(m_transform.m_rotAngle), m_transform.m_rotAxis);

	m_obj.normalMatrix = transpose(inverse(m_obj.modelMatrix));
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
// render() - renders the mesh object
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void cMesh::Render(class cShaderInfo* pShaderInfo)
{
	m_obj.render(pShaderInfo);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
// renderSprite() - renders sprites using instanced rendering
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void cMesh::RenderSprite(class cShaderInfo* pShaderInfo, const char* buffer, bool bAlphaBlend)
{
	int num_instances = 1;
	if (buffer != NULL)
	{
		num_instances = strlen(buffer);
	}

	m_obj.m_bAlphaBlend = bAlphaBlend;
	m_obj.render(pShaderInfo, num_instances, buffer);
}
